Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 1
snake.asm



      1	0000			     .model tiny
      2	0000			     .data
      3	*000			     pos struc
      4	*000  01*(??)		     X db ?
      5	*001  01*(??)		     Y db ?
      6	*002			     pos ends
      7	0000			     .code
      8				     locals
      9				     org 100h
     10	0100			     start:
     11	0100  E8 00F8			 call _change_int8h
     12	0103  E8 00E1			 call _change_int9h
     13	0106  E9 0180			 jmp main
     14
     15				     include dir.asm
1    16				     locals
1    17
1    18	0109			     change_direction proc
1    19	0109			     @@start:
1    20	0109  80 3E 0673r 01		 cmp direction,	1
1    21	010E  7F 1A			 jg @@is_head_top
1    22	0110			     @@is_head_left:
1    23	0110  80 3E 0673r 01	       cmp direction, 1
1    24	0115  75 0A		       jne @@is_head_right
1    25	0117  80 3E 0672r 00	       cmp next_direction, 0
1    26	011C  74 23		       je @@change_head
1    27	011E  E9 0082		       jmp @@end_changing
1    28	0121			     @@is_head_right:
1    29	0121  80 3E 0672r 01	       cmp next_direction, 1
1    30	0126  74 19		       je @@change_head
1    31	0128  EB 79		       jmp @@end_changing
1    32	012A			     @@is_head_top:
1    33	012A  80 3E 0673r 02	       cmp direction, 2
1    34	012F  75 09		       jne @@is_head_bot
1    35	0131  80 3E 0672r 03	       cmp next_direction, 3
1    36	0136  74 09		       je @@change_head
1    37	0138  EB 69		       jmp @@end_changing
1    38	013A			     @@is_head_bot:
1    39	013A  80 3E 0672r 02		cmp next_direction, 2
1    40	013F  75 62			jne @@end_changing
1    41
1    42	0141			     @@change_head:
1    43	0141  BE 0000			 mov si, 0
1    44	0144  8B 3E 06BAr		 mov di, snake_size
1    45	0148  83 EF 02			 sub di, 2
1    46	014B			     @@changing:
1    47	014B  8B 94 06BCr		 mov dx, snake[si]
1    48	014F  8B 9D 06BCr		 mov bx, snake[di]
1    49	0153  89 95 06BCr		 mov snake[di],	dx
1    50	0157  89 9C 06BCr		 mov snake[si],	bx
1    51	015B  83 C6 02			 add si, 2
1    52	015E  83 EF 02			 sub di, 2
1    53	0161  3B F7			 cmp si,di
1    54	0163  7C E6			 jl  @@changing
1    55	0165			     @@compute_direction:
1    56	0165  8B 1E 06BCr		 mov bx, snake[0]
1    57	0169			     @@checkX:
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 2
snake.asm



1    58	0169  80 3E 0673r 00		 cmp direction,	0
1    59	016E  74 0B			 je @@checkRight
1    60
1    61	0170			     @@checkLeft:
1    62	0170  80 C3 02			 add bl, 2
1    63	0173  3A 1E 06BEr		 cmp bl, snake[2].X
1    64	0177  74 34			 je @@end_changing_head
1    65	0179  75 0D			 jne @@check_Y
1    66	017B			     @@checkRight:
1    67	017B  80 EB 02			 sub bl, 2
1    68	017E  3A 1E 06BEr		 cmp bl, snake[2].X
1    69	0182  74 29			 je @@end_changing_head
1    70	0184  75 02			 jne @@check_Y
1    71	0186  EB 25			 jmp @@end_changing_head
1    72	0188			     @@check_Y:
1    73	0188  80 3E 0673r 02		 cmp direction,	2
1    74	018D  74 0B			 je @@checkTop
1    75	018F			     @@checkBot:
1    76	018F  80 EF 01		       sub bh, 1
1    77	0192  3A 3E 06BFr	       cmp bh, snake[2].Y
1    78	0196  74 15		       je @@end_changing_head
1    79	0198  75 09		       jne @@end_changing
1    80	019A			     @@checkTop:
1    81	019A  80 C7 01		       add bh, 1
1    82	019D  3A 3E 06BFr	       cmp bh, snake[2].Y
1    83	01A1  74 0A		       je @@end_changing_head
1    84	01A3			     @@end_changing:
1    85	01A3  8A 26 0672r		 mov ah, next_direction
1    86	01A7  88 26 0673r		 mov direction,	ah
1    87	01AB  EB 08			 jmp @@end
1    88	01AD			     @@end_changing_head:
1    89	01AD  8A 26 0673r		mov ah,	direction
1    90	01B1  88 26 0672r		mov next_direction, ah
1    91	01B5			     @@end:
1    92	01B5  C3			ret
1    93	01B6			     change_direction endp
     94				     include random.asm
1    95				     locals
1    96
1    97	01B6			     get_random_num proc
1    98	01B6  A1 01E5r		       mov   ax,[seed]		   ;считать последнее случайное число
1    99	01B9  85 C0		       test  ax,ax		   ;проверить его, если	это -1,
1   100	01BB  78 12		       js    @@fetch_seed	     ;функция ещё ни разу не вызывалась
1   101								   ; ..и надо создать начальные значения
1   102	01BD			     @@randomize:
1   103	01BD  03 C3		       add ax, bx	     ;bx приходит из вне, по сути он тут нахер +
    104				     не нужен, но немножко увеличивает стартовую		    +
    105				     "случайность"
1   106	01BF  F7 26 01E1r	       mul   [rand_a]		   ;умножить число	на а
1   107	01C3  33 D2		       xor   dx,dx
1   108	01C5  F7 36 01E3r	       div   [rand_m]		;взять остаток от	деления 2^31-1
1   109	01C9  8B C2		       mov   ax,dx
1   110	01CB  A3 01E5r		       mov   [seed],ax		   ;сохранить для следующих вызовов
1   111	01CE  C3		       ret
1   112
1   113	01CF			     @@fetch_seed:
1   114	01CF  1E		       push  ds
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 3
snake.asm



1   115	01D0  50 55 8B EC C7 46	02+    push  0040h
    116	      0040 5D
1   117	01DA  1F		       pop   ds
1   118	01DB  A1 006E		       mov   ax,word[ds:006ch]	  ;считать текущее число тактов	    +
    119				     таймера
1   120	01DE  1F		       pop   ds
1   121	01DF  EB DC		       jmp   @@randomize
1   122
1   123	01E1  F885		      rand_a   dw  63621
1   124	01E3  7FFF		      rand_m   dw  7fffh
1   125	01E5  FFFF		      seed     dw  -1
1   126	01E7			      get_random_num endp
    127
    128	01E7			     _change_int9h:
    129	01E7  33 C0			 xor ax,ax
    130	01E9  8E D8			 mov ds,ax
    131	01EB  FA			 cli
    132	01EC  B8 05AEr			 mov ax, offset	new_int9
    133	01EF  A3 0024			 mov ds:36, ax
    134	01F2  8C C8			 mov ax,cs
    135	01F4  A3 0026			 mov ds:38, ax
    136	01F7  FB			 sti
    137	01F8  0E			 push cs
    138	01F9  1F			 pop ds
    139	01FA  C3			 ret
    140	01FB			     _change_int8h:
    141	01FB  FA			 cli
    142	01FC  33 C0			 xor ax, ax
    143	01FE  8E C0			 mov es, ax
    144	0200  BB 0020			 mov bx, 32
    145	0203  26: 8B 07			 mov ax, [es:bx]
    146	0206  A3 0664r			 mov old_new_timer, ax
    147	0209  26: 8B 47	02		 mov ax, [es:bx	+ 2]
    148	020D  BF 0664r			 mov di, offset	old_new_timer
    149	0210  83 C7 02			 add di, 2
    150	0213  89 05			 mov [di], ax
    151	0215  26: C7 07	0622r		 mov [es:bx], offset new_timer
    152	021A  83 C3 02			 add bx, 2
    153	021D  26: 8C 0F			 mov [es:bx], cs
    154	0220  FB			 sti
    155	0221  C3			 ret
    156
    157	0222			     read_buf proc near
    158	0222  8B 1E 057Fr	       mov    bx, head
    159	0226  8A 07		       mov   al, byte ptr ds:[bx]
    160	0228  43		       inc   bx
    161	0229  81 FB 057Fr	       cmp   bx, offset	bufend
    162	022D  75 03		       jnz   @@1
    163	022F  BB 0575r		       mov   bx, offset	buf
    164	0232			     @@1:
    165	0232  89 1E 057Fr	       mov    head, bx
    166	0236  C3		       ret
    167	0237			     read_buf  endp
    168	0237			     isFruitAlive proc near
    169	0237  80 3E 06B1r FF		 cmp fruit.X, 255
    170	023C  75 4A			 jne @@exit
    171
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 4
snake.asm



    172	023E			     @@get_position:
    173	023E  8B 1E 0676r		 mov bx, seconds
    174	0242  03 1E 0669r		 add bx, word ptr time_tick
    175	0246  E8 FF6D			 call get_random_num
    176	0249  50			 push ax
    177	024A  32 E4			 xor ah,ah
    178	024C  B3 78			 mov bl, 120
    179	024E  F6 F3			 div bl
    180	0250  88 26 06B1r		 mov fruit.X, ah
    181	0254  80 06 06B1r 28		 add fruit.X, 40
    182	0259  F6 06 06B1r 01		 test fruit.X, 1
    183	025E  74 04			 jz @@Y
    184	0260  FE 0E 06B1r		 dec fruit.X
    185	0264			     @@Y:
    186	0264  58			 pop ax
    187	0265  32 C0			 xor al,al
    188	0267  86 C4			 xchg al, ah
    189	0269  B3 18			 mov bl, 24
    190	026B  F6 F3			 div bl
    191	026D  88 26 06B2r		 mov fruit.Y, ah
    192	0271				 @@check_fruit:
    193	0271  A1 06B1r			mov ax,	fruit
    194	0274  BE 0000			mov si,	0
    195	0277			     @@check_next:
    196	0277  8B 9C 06BCr		 mov bx, snake[si]
    197	027B  3B C3			 cmp ax,bx
    198	027D  74 BF			 je @@get_position
    199	027F  83 C6 02			 add si, 2
    200	0282  3B 36 06BAr		 cmp si, snake_size
    201	0286  75 EF			 jne @@check_next
    202	0288			     @@exit:
    203	0288  C3		       ret
    204
    205	0289			     isFruitAlive endp
    206	0289			     main proc near
    207	0289  E8 FFAB		       call isFruitAlive
    208	028C  E8 015B		       call @@draw
    209	028F			     @@lop:
    210	028F  F4			 hlt
    211	0290  8B 1E 057Fr		 mov	bx, head
    212	0294  3B 1E 0581r		 cmp	bx, tail
    213	0298  74 F5			 jz    @@lop
    214	029A  E8 FF85			 call read_buf
    215	029D  3C 06			 cmp al, 6
    216	029F  74 0E			 je @@pause
    217	02A1  3C 04			 cmp al, 4
    218	02A3  74 08			 je reboot
    219	02A5  3C 05			 cmp al, 5
    220	02A7  7C 0D			 jl @@change_next_direction
    221	02A9  74 10			 je @@move
    222	02AB  EB E2			 jmp @@lop
    223
    224	02AD			     reboot:
    225	02AD  CD 19		       int 19h
    226
    227	02AF			     @@pause:
    228	02AF  80 36 0668r 01	       xor working, 1
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 5
snake.asm



    229	02B4  EB D9		       jmp @@lop
    230	02B6			     @@change_next_direction:
    231	02B6  A2 0672r			 mov next_direction, al
    232	02B9  EB D4			 jmp @@lop
    233	02BB			     @@move:
    234	02BB  E8 01AE		       call @@speed_up
    235	02BE  E8 FE48		       call change_direction
    236	02C1  FE 06 066Dr	       inc moves_count
    237	02C5  8A 26 066Dr	       mov ah, moves_count
    238	02C9  3A 26 066Cr	       cmp ah, moves_per_up
    239	02CD  75 08		       jne @@move_it
    240	02CF  E8 008F		       call @@add_size
    241	02D2  C6 06 066Dr 00	       mov moves_count,	0
    242	02D7			     @@move_it:
    243	02D7  8B 1E 06BAr	       mov bx, snake_size  ;индекс последнего
    244	02DB  8B 36 06BAr	       mov si, snake_size  ;индекс предпоследнего
    245	02DF  83 EE 02		       sub si, 2
    246	02E2  A0 0673r		       mov al, direction
    247	02E5  3C 02		       cmp al, 2
    248	02E7  7C 37		       jl @@left_right
    249	02E9			     @@up_down:
    250	02E9  3C 03			   cmp al, 3
    251	02EB  74 1A			   je @@down
    252	02ED			     @@up:
    253	02ED  8B 8C 06BCr		 mov cx, snake[si]
    254	02F1  89 8F 06BCr		 mov snake[bx],	cx
    255	02F5  83 EE 02			 sub si, 2
    256	02F8  83 EB 02			 sub bx, 2
    257	02FB  83 FB 00			 cmp bx, 0
    258	02FE  75 ED			 jne @@up
    259	0300  FE 0E 06BDr		 dec snake[0].Y
    260	0304  E9 0097			 jmp @@check_poses
    261	0307			     @@down:
    262	0307  8B 8C 06BCr		mov cx,	snake[si]
    263	030B  89 8F 06BCr		 mov snake[bx],	cx
    264	030F  83 EE 02			 sub si, 2
    265	0312  83 EB 02			 sub bx, 2
    266	0315  83 FB 00			 cmp bx, 0
    267	0318  75 ED			 jne @@down
    268	031A  FE 06 06BDr		 inc snake[0].Y
    269	031E  EB 7E			 jmp @@check_poses
    270	0320			     @@left_right:
    271	0320  3C 00			 cmp al, 0
    272	0322  75 1A			 jne @@left
    273
    274	0324			     @@right:
    275	0324  8B 8C 06BCr		 mov cx, snake[si]
    276	0328  89 8F 06BCr		 mov snake[bx],	cx
    277	032C  83 EE 02			 sub si, 2
    278	032F  83 EB 02			 sub bx, 2
    279	0332  83 FB 00			 cmp bx, 0
    280	0335  75 ED			 jne @@right
    281	0337  80 06 06BCr 02		 add snake[0].X, 2
    282	033C  EB 60			 jmp @@check_poses
    283	033E			     @@left:
    284	033E  8B 8C 06BCr		 mov cx, snake[si]
    285	0342  89 8F 06BCr		 mov snake[bx],	cx
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 6
snake.asm



    286	0346  83 EE 02			 sub si, 2
    287	0349  83 EB 02			 sub bx, 2
    288	034C  83 FB 00			 cmp bx, 0
    289	034F  75 ED			 jne @@left
    290	0351  80 2E 06BCr 02		 sub snake[0].X, 2
    291	0356  EB 46			 jmp @@check_poses
    292	0358			     @@end_check_pos:
    293	0358  E8 0019		       call @@fruit_eaten
    294	035B  E8 FED9		       call isFruitAlive
    295	035E  E9 0089		       jmp @@draw
    296
    297	0361			       @@add_size:
    298	0361  83 06 06BAr 02		 add snake_size, 2
    299	0366  A0 066Fr			 mov al, speed_level
    300	0369  FE C0			 inc al
    301	036B  B3 0B			 mov bl, 11
    302	036D  F6 E3			 mul bl
    303	036F  01 06 0674r		 add score, ax
    304
    305	0373  C3			 ret
    306	0374			     @@fruit_eaten:
    307	0374  A1 06B1r			 mov ax, fruit
    308	0377  38 06 06BCr		 cmp snake[0].X, al
    309	037B  75 20			 jne @@not_eaten
    310	037D  38 26 06BDr		 cmp snake[0].Y, ah
    311	0381  75 1A			 jne @@not_eaten
    312	0383  C6 06 06B1r FF		 mov fruit.X, 255
    313	0388  83 06 06BAr 02		 add snake_size, 2
    314	038D  B8 0003			 mov ax, 3
    315	0390  8A 1E 066Fr		 mov bl, speed_level
    316	0394  80 C3 02			 add bl, 2
    317	0397  F6 E3			 mul bl
    318	0399  01 06 0674r		 add score, ax
    319	039D			     @@not_eaten:
    320	039D  C3			 ret
    321	039E			     @@check_poses:
    322	039E  E8 00EB			 call @@check_crossing
    323	03A1  33 F6			 xor si,si
    324	03A3				 @@check_pos:
    325	03A3  3B 36 06BAr		   cmp si, snake_size
    326	03A7  74 AF			     je	@@end_check_pos
    327	03A9  E8 0008			   call	@@check_line
    328	03AC  E8 0020			   call	@@check_col
    329	03AF  83 C6 02			   add si, 2
    330	03B2  EB EF			 jmp @@check_pos
    331	03B4			     @@check_line:
    332	03B4  8A 84 06BCr		 mov al, snake[si].X
    333	03B8  E8 0005			 call @@check1
    334	03BB  88 84 06BCr		 mov snake[si].X, al
    335	03BF  C3			 ret
    336	03C0			     @@check1:
    337	03C0  3C 28			 cmp al, 40
    338	03C2  74 08			 je @@set_max_line
    339	03C4  3C A0			 cmp al, 160
    340	03C6  74 01			 je @@set_min_line
    341	03C8  C3			 ret
    342	03C9			     @@set_min_line:
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 7
snake.asm



    343	03C9  B0 2A			 mov al, 42
    344	03CB  C3			 ret
    345	03CC			     @@set_max_line:
    346	03CC  B0 9E			 mov al, 158
    347	03CE  C3			 ret
    348	03CF			     @@check_col:
    349	03CF  8A 84 06BDr		 mov al, snake[si].Y
    350	03D3  E8 0005			 call @@check2
    351	03D6  88 84 06BDr		 mov snake[si].Y, al
    352	03DA  C3			 ret
    353	03DB			     @@check2:
    354	03DB  3C FF			 cmp al, -1
    355	03DD  74 08			 je @@set_max_col
    356	03DF  3C 19			 cmp al, 25
    357	03E1  74 01			 je @@set_min_col
    358	03E3  C3			 ret
    359	03E4			     @@set_min_col:
    360	03E4  32 C0			 xor al,al
    361	03E6  C3			 ret
    362	03E7			     @@set_max_col:
    363	03E7  B0 18			 mov al, 24
    364	03E9  C3			 ret
    365	03EA			     @@draw:
    366	03EA  E8 0065			 call @@clear_screen
    367	03ED  B8 B800			 mov   ax, 0b800h
    368	03F0  8E C0			 mov   es, ax
    369	03F2  B4 02			 mov   ah, 02h
    370	03F4  B0 23			 mov   al, '#'
    371	03F6  BE 0000			 mov si, 0
    372	03F9  EB 0F			 jmp @@drawpos
    373	03FB			     @@draw_fruit:
    374	03FB  B0 2A		       mov al, '*'
    375	03FD  8A 2E 06B1r	       mov ch, fruit.X
    376	0401  8A 0E 06B2r	       mov cl, fruit.Y
    377	0405  E8 001B		       call @@get_position
    378	0408  AB		       stosw
    379	0409  C3		       ret
    380	040A			     @@drawpos:
    381	040A  3B 36 06BAr		 cmp si, snake_size
    382	040E  74 24			 je @@end_draw
    383	0410  8A AC 06BCr		 mov ch, snake[si].X
    384	0414  8A 8C 06BDr		 mov cl, snake[si].Y
    385	0418  E8 0008			 call @@get_position
    386	041B  AB			 stosw
    387	041C  83 C6 02			 add si, 2
    388	041F  EB E9			 jmp @@drawpos
    389	0421  EB 11			 jmp @@end_draw
    390	0423			     @@get_position:
    391	0423  50		       push ax
    392	0424  8A C1		       mov al, cl
    393	0426  F6 26 0670r	       mul line_lenght
    394	042A  32 FF		       xor bh, bh
    395	042C  8A DD		       mov bl, ch
    396	042E  03 C3		       add ax, bx
    397	0430  8B F8		       mov di, ax
    398	0432  58		       pop ax
    399	0433  C3		       ret
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 8
snake.asm



    400
    401	0434			     @@end_draw:
    402	0434  E8 FFC4		       call @@draw_fruit
    403	0437  8A 2E 06BCr	       mov ch, snake[0].X
    404	043B  8A 0E 06BDr	       mov cl, snake[0].Y
    405	043F  E8 FFE1		       call @@get_position
    406	0442  B0 40		       mov al,'@'
    407	0444  AB		       stosw
    408	0445  E8 008B		       call drawstat
    409	0448  80 3E 06B0r 01	       cmp is_game_over, 1
    410	044D  74 55		       je GAMEOVER
    411	044F  E9 FE3D		       jmp @@lop
    412	0452			     @@clear_screen:
    413	0452  B8 B800		       mov ax, 0B800h
    414	0455  BF 0000		       mov di, 0
    415	0458  8E C0		       mov es, ax
    416	045A  33 C0		       xor ax,ax
    417	045C  B9 0FA0		       mov cx, 4000
    418	045F  F3> AB		       rep stosw
    419	0461  C3			ret
    420
    421	0462			     @@remove_cursor:
    422	0462  B4 02		       mov    ah, 2
    423	0464  32 FF		       xor    bh,bh
    424	0466  BA 1FBE		       mov    dx, 8126
    425	0469  CD 10		       int    10h
    426	046B  C3		       ret
    427	046C			     @@speed_up:
    428	046C  80 3E 066Fr 06	       cmp speed_level,	6
    429	0471  74 18		       je @@end_speed_up
    430	0473  8A 16 06BAr	       mov dl, byte ptr	snake_size
    431	0477  8A 1E 066Fr	       mov bl, speed_level
    432	047B  32 FF		       xor bh,bh
    433	047D  3A 97 06B3r	       cmp dl, speed_up_size[bx]
    434	0481  75 08		       jne @@end_speed_up
    435	0483  FE 06 066Fr	       inc speed_level
    436	0487  FE 0E 066Er	       dec game_speed
    437	048B			     @@end_speed_up:
    438	048B  C3		       ret
    439	048C			     @@check_crossing:
    440	048C  A1 06BCr			 mov ax, snake[0]
    441	048F  BE 0002			 mov si, 2
    442	0492			     @@check_next:
    443	0492  8B 9C 06BCr		 mov bx, snake[si]
    444	0496  3B C3			 cmp ax,bx
    445	0498  74 0A			 je GAMEOVER
    446	049A  83 C6 02			 add si, 2
    447	049D  3B 36 06BAr		 cmp si, snake_size
    448	04A1  75 EF			 jne @@check_next
    449	04A3  C3			 ret
    450	04A4			     main endp
    451
    452	04A4			     GAMEOVER:
    453	04A4  C6 06 06B0r 01	       mov is_game_over, 1
    454	04A9  F4		       hlt
    455	04AA  8B 1E 057Fr	       mov    bx, head
    456	04AE  3B 1E 0581r	       cmp    bx, tail
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 9
snake.asm



    457	04B2  74 F0		       jz    GAMEOVER
    458	04B4  BD 06A7r		       mov bp, offset game_over
    459	04B7  B9 0009		       mov cx, 9
    460	04BA  BA 0B28		       mov dx, 0B28h
    461	04BD  06		       push es
    462	04BE  0E		       push cs
    463	04BF  07		       pop es
    464	04C0  B8 1300		       mov ax, 1300h
    465	04C3  BB 0004		       mov bx, 0004h
    466	04C6  CD 10		       int 10h
    467	04C8  07		       pop es
    468	04C9  E8 FD56		       call read_buf
    469	04CC  3C 04		       cmp al, 4
    470	04CE  75 D4		       jne GAMEOVER
    471	04D0  E9 FDDA		       jmp reboot
    472
    473	04D3			     drawstat proc near
    474	04D3  E8 0072		       call @@drawSeparator
    475	04D6  E8 0043		       call @@drawScore
    476	04D9  E8 000A		       call @@drawSpeed
    477	04DC  E8 0021		       call @@drawSize
    478	04DF  E8 0050		       call @@draw_time
    479	04E2  E8 0074		       call @@drawGameName
    480	04E5  C3		       ret
    481	04E6			     @@drawSpeed:
    482	04E6  BD 069Br		       mov bp, offset speed_text
    483	04E9  B9 000C		       mov cx, 12
    484	04EC  BA 0503		       mov dx, 0503h
    485	04EF  E8 0074		       call write_string
    486	04F2  A0 066Fr		       mov al, speed_level
    487	04F5  32 E4		       xor ah,ah
    488	04F7  FE C0		       inc al
    489	04F9  BF 0342		       mov di, 834
    490	04FC  E8 0104		       call write_num_in_ax
    491	04FF  C3		       ret
    492	0500			     @@drawSize:
    493	0500  BD 0690r		       mov bp, offset size_text
    494	0503  B9 000B		       mov cx, 11
    495	0506  BA 0703		       mov dx, 0703h
    496	0509  E8 005A		       call write_string
    497	050C  A1 06BAr		       mov ax, snake_size
    498	050F  B3 02		       mov bl, 2
    499	0511  F6 F3		       div bl
    500	0513  32 E4		       xor ah,ah
    501	0515  BF 0482		       mov di, 1154
    502	0518  E8 00E8		       call write_num_in_ax
    503	051B  C3		       ret
    504	051C			     @@drawScore:
    505	051C  BD 0685r		       mov bp, offset score_name
    506	051F  B9 0006		       mov cx, 6
    507	0522  BA 0303		       mov dx, 0303h
    508	0525  E8 003E		       call write_string
    509	0528  A1 0674r		       mov ax, score
    510	052B  BF 01F6		       mov di, 502
    511	052E  E8 00D2		       call write_num_in_ax
    512	0531  C3		       ret
    513	0532			     @@draw_time:
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 10
snake.asm



    514	0532  BD 068Br		       mov bp, offset time
    515	0535  B9 0005		       mov cx, 5
    516	0538  BA 0903		       mov dx, 0903h
    517	053B  E8 0028		       call write_string
    518	053E  A1 0676r		       mov ax, seconds
    519	0541  BF 05B4		       mov di, 1460
    520	0544  E8 00BC		       call write_num_in_ax
    521	0547  C3		       ret
    522	0548			     @@drawSeparator:
    523	0548  BF 0028		       mov di, 40
    524	054B  B0 DD		       mov al, 0DDh
    525	054D  B9 0019		       mov cx, 25
    526	0550  BA 009E		       mov dx, 158
    527	0553			     @@drawSep:
    528	0553  AB		       stosw
    529	0554  03 FA		       add di, dx
    530	0556  E2 FB		       loop @@drawSep
    531	0558  C3		       ret
    532	0559			     @@drawGameName:
    533	0559  BA 0104		       mov dx, 0104h
    534	055C  BD 0678r		       mov bp, offset gamename
    535	055F  B9 000D		       mov cx, 13
    536	0562  E8 0001		       call write_string
    537	0565  C3		       ret
    538	0566			     write_string: ;в cx - длина строки, в	bp - offset строки dx - позиция
    539	0566  50		       push ax
    540	0567  06		       push es
    541	0568  0E		       push cs
    542	0569  07		       pop es
    543	056A  B8 1300		       mov ax, 1300h
    544	056D  BB 0002		       mov bx, 0002h
    545	0570  CD 10		       int 10h
    546	0572  07		       pop es
    547	0573  58		       pop ax
    548	0574  C3		       ret
    549	0575			     drawstat endp
    550
    551	0575  0A*(00)		     buf db 10 dup(0)
    552	057F			     bufend:
    553	057F  0575r		     head dw offset buf
    554	0581  0575r		     tail dw offset buf
    555	0583			     write_buf	 proc near
    556	0583  57		       push   di
    557	0584  53		       push   bx
    558	0585  55		       push   bp
    559	0586  2E: 8B 3E	0581r	       mov   di, cs:tail
    560	058B  8B DF		       mov   bx, di
    561	058D  47		       inc    di
    562	058E  81 FF 057Fr	       cmp   di, offset	bufend
    563	0592  75 03		       jnz   @@1
    564	0594  BF 0575r		       mov   di, offset	buf
    565	0597			     @@1:
    566	0597  8B EF		       mov   bp, di
    567	0599  2E: 3B 3E	057Fr	       cmp   di, cs:head
    568	059E  74 0A		       jz    @@9
    569	05A0  8B FB		       mov   di, bx
    570	05A2  2E: 88 05		       mov    byte ptr cs:[di],	al ;процедура записи
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 11
snake.asm



    571	05A5  2E: 89 2E	0581r	       mov   cs:tail, bp
    572	05AA			     @@9:
    573	05AA  5D		       pop   bp
    574	05AB  5B		       pop   bx
    575	05AC  5F		       pop   di
    576	05AD  C3		       ret
    577	05AE			     write_buf	 endp
    578
    579	05AE			     new_int9 proc near
    580	05AE  FA		     cli
    581	05AF  50			 push ax
    582	05B0  E4 60			 in    al, 60h
    583	05B2  3C 81			 cmp al, 81h
    584	05B4  74 2F			 je @@set_reboot
    585	05B6  3C CD			 cmp al, 0CDh
    586	05B8  74 17			 je @@set_right
    587	05BA  3C CB			 cmp al, 0CBh
    588	05BC  74 18			 je @@set_left
    589	05BE  3C C8			 cmp al, 0C8h
    590	05C0  74 19			 je @@set_top
    591	05C2  3C D0			 cmp al, 0D0h
    592	05C4  74 1A			 je @@set_bot
    593	05C6  3C B9			 cmp al, 0b9h
    594	05C8  74 02			 je @@set_pause
    595
    596	05CA  EB 24			 jmp @@exit
    597
    598	05CC			     @@set_pause:
    599	05CC  50		       push ax
    600	05CD  B0 06		       mov al,6
    601	05CF  EB 19		       jmp @@write_to_buf
    602	05D1			     @@set_right:
    603	05D1  50		       push ax
    604	05D2  B0 00		       mov al, 0
    605	05D4  EB 14		       jmp @@write_to_buf
    606	05D6			     @@set_left:
    607	05D6  50		       push ax
    608	05D7  B0 01		       mov al, 1
    609	05D9  EB 0F		       jmp @@write_to_buf
    610	05DB			     @@set_top:
    611	05DB  50		       push ax
    612	05DC  B0 02		       mov al, 2
    613	05DE  EB 0A		       jmp @@write_to_buf
    614	05E0			     @@set_bot:
    615	05E0  50		       push ax
    616	05E1  B0 03		       mov al, 3
    617	05E3  EB 05		       jmp @@write_to_buf
    618	05E5			     @@set_reboot:
    619	05E5  50		       push ax
    620	05E6  B0 04		       mov al, 4
    621	05E8  EB 00		       jmp @@write_to_buf
    622
    623	05EA			     @@write_to_buf:
    624	05EA  E8 FF96		       call write_buf
    625	05ED  58		       pop ax
    626	05EE  EB 00		       jmp @@exit
    627
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 12
snake.asm



    628	05F0			     @@exit:
    629	05F0  E4 61			 in    al, 61h
    630	05F2  8A E0			 mov   ah,al
    631	05F4  0C 80			 or    al,80h	 ;установить бит "подтверждения ввода"
    632	05F6  E6 61			 out   61h,al
    633	05F8  86 E0			 xchg  ah,al	 ;вывести старое значение РВ
    634	05FA  E6 61			 out   61h,al
    635	05FC  B0 20			 mov   al,20h	 ;послать сигнал EOI
    636	05FE  E6 20			 out   20h,al	 ;контроллеру прерываний
    637	0600  58			 pop ax
    638	0601  FB		       sti
    639	0602  CF		       iret
    640
    641	0603			     new_int9 endp
    642	0603			     write_num_in_ax proc near ;ax - number, di	- position to draw
    643	0603  BB 000A		       mov bx, 10
    644	0606  33 C9		       xor cx, cx
    645	0608			     @@div:
    646	0608  33 D2		       xor dx, dx
    647	060A  F7 F3		       div bx
    648	060C  52		       push dx
    649	060D  41		       inc cx
    650	060E  3D 0000		       cmp ax, 0
    651	0611  75 F5		       jne @@div
    652	0613			     @@print_char:
    653	0613  58		       pop ax
    654	0614  04 30		       add al, '0'
    655	0616  B4 02		       mov ah, 02h
    656	0618  49		       dec cx
    657	0619  AB		       stosw
    658	061A  83 F9 00		       cmp cx, 0
    659	061D  74 02		       je @@finish
    660	061F  EB F2		     jmp @@print_char
    661	0621			     @@finish:
    662	0621  C3		      ret
    663	0622			     write_num_in_ax endp
    664
    665
    666
    667	0622			     new_timer proc near
    668	0622  FA			 cli
    669	0623  50			 push ax
    670	0624  80 3E 0668r 00		 cmp working, 0
    671	0629  74 36			 je @@exit
    672
    673	062B  FE 06 0669r		 inc time_tick
    674	062F  A0 0669r			 mov al, time_tick
    675	0632  38 06 066Br		 cmp time_tick_sec,  al
    676	0636  74 11			 je @@add_sec
    677	0638			     @@add_tick:
    678	0638  2E: FE 06	066Ar		 inc cs:ticks_count
    679
    680	063D			     @@check_tick:
    681	063D  A0 066Er			 mov al, game_speed
    682	0640  2E: 38 06	066Ar		 cmp cs:ticks_count, al
    683	0645  74 0D			 je @@tick
    684	0647  EB 18			 jmp @@exit
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 13
snake.asm



    685	0649			     @@add_sec:
    686	0649  FF 06 0676r		 inc seconds
    687	064D  C6 06 0669r 00		 mov time_tick,	0
    688	0652  EB E4			 jmp @@add_tick
    689	0654			     @@tick:
    690	0654  50			 push ax
    691	0655  B0 05			 mov al, 5
    692	0657  E8 FF29			 call write_buf
    693	065A  58			 pop ax
    694	065B  2E: C6 06	066Ar 00	 mov cs:ticks_count, 0
    695
    696	0661			     @@exit:
    697	0661  FB			 sti
    698	0662  58			  pop ax
    699	0663  EA		     db	0eah
    700	0664  0000 0000		     old_new_timer dw 0, 0
    701
    702	0668			     new_timer endp
    703
    704	0668  01		     working db	1
    705	0669  00		     time_tick db 0
    706	066A  00		     ticks_count db 0
    707	066B  12		     time_tick_sec db 18
    708	066C  14		     moves_per_up db 20
    709	066D  00		     moves_count db 0
    710	066E  07		     game_speed	db 7
    711	066F  00		     speed_level db 0
    712	0670  A0		     line_lenght db 160
    713	0671  18		     column_lenght db 24
    714	0672  00		     next_direction db 0
    715	0673  00		     direction db 0  ;0	- вправо,	1  - влево, 2 - вверх, 3 - вниз
    716	0674  0000		     score dw 0
    717	0676  0000		     seconds dw	0
    718	0678  53 55 50 45 52 53	4E+  gamename db 'SUPERSNAKE999'
    719	      41 4B 45 39 39 39
    720	0685  53 63 6F 72 65 3A	     score_name	db 'Score:'
    721	068B  54 69 6D 65 3A	     time db 'Time:'
    722	0690  53 6E 61 6B 65 20	73+  size_text db 'Snake size:'
    723	      69 7A 65 3A
    724	069B  53 70 65 65 64 20	6C+  speed_text	db 'Speed level:'
    725	      65 76 65 6C 3A
    726	06A7  47 41 4D 45 20 4F	56+  game_over db 'GAME	OVER'
    727	      45 52
    728	06B0  00		     is_game_over db 0
    729	06B1  FF FF		     fruit pos <255,255>
    730	06B3  0E 1A 26 2E 38 46	5A   speed_up_size db 14, 26, 38, 46, 56, 70, 90
    731	06BA  0008		     snake_size	dw 8 ;Указывается в	2 раза больше(реальное	    +
    732				     значение =	snake_size/2)
    733	06BC  52 0A 50 0A 4E 0A	4C+  snake pos <82,10>,	<80, 10>,<78, 10>,<76, 10>
    734	      0A
    735				     end start
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 14
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05/10/18"
??FILENAME			  Text	 "snake	  "
??TIME				  Text	 "13:31:50"
??VERSION			  Number 030A
@32BIT				  Text	 0
@@1				  Near	 DGROUP:0232
@@1				  Near	 DGROUP:0597
@@9				  Near	 DGROUP:05AA
@@ADD_SEC			  Near	 DGROUP:0649
@@ADD_SIZE			  Near	 DGROUP:0361
@@ADD_TICK			  Near	 DGROUP:0638
@@CHANGE_HEAD			  Near	 DGROUP:0141
@@CHANGE_NEXT_DIRECTION		  Near	 DGROUP:02B6
@@CHANGING			  Near	 DGROUP:014B
@@CHECK1			  Near	 DGROUP:03C0
@@CHECK2			  Near	 DGROUP:03DB
@@CHECKBOT			  Near	 DGROUP:018F
@@CHECKLEFT			  Near	 DGROUP:0170
@@CHECKRIGHT			  Near	 DGROUP:017B
@@CHECKTOP			  Near	 DGROUP:019A
@@CHECKX			  Near	 DGROUP:0169
@@CHECK_COL			  Near	 DGROUP:03CF
@@CHECK_CROSSING		  Near	 DGROUP:048C
@@CHECK_FRUIT			  Near	 DGROUP:0271
@@CHECK_LINE			  Near	 DGROUP:03B4
@@CHECK_NEXT			  Near	 DGROUP:0277
@@CHECK_NEXT			  Near	 DGROUP:0492
@@CHECK_POS			  Near	 DGROUP:03A3
@@CHECK_POSES			  Near	 DGROUP:039E
@@CHECK_TICK			  Near	 DGROUP:063D
@@CHECK_Y			  Near	 DGROUP:0188
@@CLEAR_SCREEN			  Near	 DGROUP:0452
@@COMPUTE_DIRECTION		  Near	 DGROUP:0165
@@DIV				  Near	 DGROUP:0608
@@DOWN				  Near	 DGROUP:0307
@@DRAW				  Near	 DGROUP:03EA
@@DRAWGAMENAME			  Near	 DGROUP:0559
@@DRAWPOS			  Near	 DGROUP:040A
@@DRAWSCORE			  Near	 DGROUP:051C
@@DRAWSEP			  Near	 DGROUP:0553
@@DRAWSEPARATOR			  Near	 DGROUP:0548
@@DRAWSIZE			  Near	 DGROUP:0500
@@DRAWSPEED			  Near	 DGROUP:04E6
@@DRAW_FRUIT			  Near	 DGROUP:03FB
@@DRAW_TIME			  Near	 DGROUP:0532
@@END				  Near	 DGROUP:01B5
@@END_CHANGING			  Near	 DGROUP:01A3
@@END_CHANGING_HEAD		  Near	 DGROUP:01AD
@@END_CHECK_POS			  Near	 DGROUP:0358
@@END_DRAW			  Near	 DGROUP:0434
@@END_SPEED_UP			  Near	 DGROUP:048B
@@EXIT				  Near	 DGROUP:0288
@@EXIT				  Near	 DGROUP:05F0
@@EXIT				  Near	 DGROUP:0661
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 15
Symbol Table



@@FETCH_SEED			  Near	 DGROUP:01CF
@@FINISH			  Near	 DGROUP:0621
@@FRUIT_EATEN			  Near	 DGROUP:0374
@@GET_POSITION			  Near	 DGROUP:023E
@@GET_POSITION			  Near	 DGROUP:0423
@@IS_HEAD_BOT			  Near	 DGROUP:013A
@@IS_HEAD_LEFT			  Near	 DGROUP:0110
@@IS_HEAD_RIGHT			  Near	 DGROUP:0121
@@IS_HEAD_TOP			  Near	 DGROUP:012A
@@LEFT				  Near	 DGROUP:033E
@@LEFT_RIGHT			  Near	 DGROUP:0320
@@LOP				  Near	 DGROUP:028F
@@MOVE				  Near	 DGROUP:02BB
@@MOVE_IT			  Near	 DGROUP:02D7
@@NOT_EATEN			  Near	 DGROUP:039D
@@PAUSE				  Near	 DGROUP:02AF
@@PRINT_CHAR			  Near	 DGROUP:0613
@@RANDOMIZE			  Near	 DGROUP:01BD
@@REMOVE_CURSOR			  Near	 DGROUP:0462
@@RIGHT				  Near	 DGROUP:0324
@@SET_BOT			  Near	 DGROUP:05E0
@@SET_LEFT			  Near	 DGROUP:05D6
@@SET_MAX_COL			  Near	 DGROUP:03E7
@@SET_MAX_LINE			  Near	 DGROUP:03CC
@@SET_MIN_COL			  Near	 DGROUP:03E4
@@SET_MIN_LINE			  Near	 DGROUP:03C9
@@SET_PAUSE			  Near	 DGROUP:05CC
@@SET_REBOOT			  Near	 DGROUP:05E5
@@SET_RIGHT			  Near	 DGROUP:05D1
@@SET_TOP			  Near	 DGROUP:05DB
@@SPEED_UP			  Near	 DGROUP:046C
@@START				  Near	 DGROUP:0109
@@TICK				  Near	 DGROUP:0654
@@UP				  Near	 DGROUP:02ED
@@UP_DOWN			  Near	 DGROUP:02E9
@@WRITE_TO_BUF			  Near	 DGROUP:05EA
@@Y				  Near	 DGROUP:0264
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 SNAKE
@INTERFACE			  Text	 00H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUF				  Byte	 DGROUP:0575
BUFEND				  Near	 DGROUP:057F
CHANGE_DIRECTION		  Near	 DGROUP:0109
COLUMN_LENGHT			  Byte	 DGROUP:0671
DIRECTION			  Byte	 DGROUP:0673
DRAWSTAT			  Near	 DGROUP:04D3
FRUIT				  Struct DGROUP:06B1 POS
GAMENAME			  Byte	 DGROUP:0678
GAMEOVER			  Near	 DGROUP:04A4
Turbo Assembler	 Version 3.1	    05/10/18 13:31:51	    Page 16
Symbol Table



GAME_OVER			  Byte	 DGROUP:06A7
GAME_SPEED			  Byte	 DGROUP:066E
GET_RANDOM_NUM			  Near	 DGROUP:01B6
HEAD				  Word	 DGROUP:057F
ISFRUITALIVE			  Near	 DGROUP:0237
IS_GAME_OVER			  Byte	 DGROUP:06B0
LINE_LENGHT			  Byte	 DGROUP:0670
MAIN				  Near	 DGROUP:0289
MOVES_COUNT			  Byte	 DGROUP:066D
MOVES_PER_UP			  Byte	 DGROUP:066C
NEW_INT9			  Near	 DGROUP:05AE
NEW_TIMER			  Near	 DGROUP:0622
NEXT_DIRECTION			  Byte	 DGROUP:0672
OLD_NEW_TIMER			  Word	 DGROUP:0664
RAND_A				  Word	 DGROUP:01E1
RAND_M				  Word	 DGROUP:01E3
READ_BUF			  Near	 DGROUP:0222
REBOOT				  Near	 DGROUP:02AD
SCORE				  Word	 DGROUP:0674
SCORE_NAME			  Byte	 DGROUP:0685
SECONDS				  Word	 DGROUP:0676
SEED				  Word	 DGROUP:01E5
SIZE_TEXT			  Byte	 DGROUP:0690
SNAKE				  Struct DGROUP:06BC POS
SNAKE_SIZE			  Word	 DGROUP:06BA
SPEED_LEVEL			  Byte	 DGROUP:066F
SPEED_TEXT			  Byte	 DGROUP:069B
SPEED_UP_SIZE			  Byte	 DGROUP:06B3
START				  Near	 DGROUP:0100
TAIL				  Word	 DGROUP:0581
TICKS_COUNT			  Byte	 DGROUP:066A
TIME				  Byte	 DGROUP:068B
TIME_TICK			  Byte	 DGROUP:0669
TIME_TICK_SEC			  Byte	 DGROUP:066B
WORKING				  Byte	 DGROUP:0668
WRITE_BUF			  Near	 DGROUP:0583
WRITE_NUM_IN_AX			  Near	 DGROUP:0603
WRITE_STRING			  Near	 DGROUP:0566
_CHANGE_INT8H			  Near	 DGROUP:01FB
_CHANGE_INT9H			  Near	 DGROUP:01E7

Structure Name			  Type	Offset

POS
 X				  Byte	 0000
 Y				  Byte	 0001

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  06C4 Word	  Public  CODE
